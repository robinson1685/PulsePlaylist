// <auto-generated/>
#pragma warning disable CS0618
using PulsePlaylist.Api.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace PulsePlaylist.Api.Client.Account.Login2fa
{
    /// <summary>
    /// Builds and executes requests for operations under \account\login2fa
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Login2faRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Login2faRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/account/login2fa{?useCookies*,useSessionCookies*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Login2faRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/account/login2fa{?useCookies*,useSessionCookies*}", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint allows users to log in with their email and password. If two-factor authentication is enabled, the user must provide a valid two-factor code or recovery code. Supports persistent cookies or bearer tokens.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::PulsePlaylist.Api.Client.Models.ProblemDetails">When receiving a 400 status code</exception>
        /// <exception cref="global::PulsePlaylist.Api.Client.Models.ProblemDetails">When receiving a 401 status code</exception>
        /// <exception cref="global::PulsePlaylist.Api.Client.Models.ProblemDetails">When receiving a 404 status code</exception>
        public async Task<Stream> PostAsync(global::PulsePlaylist.Api.Client.Models.LoginRequest body, Action<RequestConfiguration<global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder.Login2faRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::PulsePlaylist.Api.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "401", global::PulsePlaylist.Api.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
                { "404", global::PulsePlaylist.Api.Client.Models.ProblemDetails.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint allows users to log in with their email and password. If two-factor authentication is enabled, the user must provide a valid two-factor code or recovery code. Supports persistent cookies or bearer tokens.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        public RequestInformation ToPostRequestInformation(global::PulsePlaylist.Api.Client.Models.LoginRequest body, Action<RequestConfiguration<global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder.Login2faRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/problem+json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder WithUrl(string rawUrl)
        {
            return new global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// This endpoint allows users to log in with their email and password. If two-factor authentication is enabled, the user must provide a valid two-factor code or recovery code. Supports persistent cookies or bearer tokens.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Login2faRequestBuilderPostQueryParameters 
        {
            [QueryParameter("useCookies")]
            public bool? UseCookies { get; set; }
            [QueryParameter("useSessionCookies")]
            public bool? UseSessionCookies { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Login2faRequestBuilderPostRequestConfiguration : RequestConfiguration<global::PulsePlaylist.Api.Client.Account.Login2fa.Login2faRequestBuilder.Login2faRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
