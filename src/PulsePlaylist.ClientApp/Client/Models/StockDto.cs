// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace PulsePlaylist.Api.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StockDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The created property</summary>
        public DateTimeOffset? Created { get; set; }
        /// <summary>The id property</summary>
        public string Id { get; set; }
        /// <summary>The lastModified property</summary>
        public DateTimeOffset? LastModified { get; set; }
        /// <summary>The location property</summary>
        public string Location { get; set; }
        /// <summary>The product property</summary>
        public global::PulsePlaylist.Api.Client.Models.ProductDto2 Product { get; set; }
        /// <summary>The productId property</summary>
        public string ProductId { get; set; }
        /// <summary>The quantity property</summary>
        public int? Quantity { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::PulsePlaylist.Api.Client.Models.StockDto"/> and sets the default values.
        /// </summary>
        public StockDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::PulsePlaylist.Api.Client.Models.StockDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::PulsePlaylist.Api.Client.Models.StockDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::PulsePlaylist.Api.Client.Models.StockDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created", n => { Created = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "lastModified", n => { LastModified = n.GetDateTimeOffsetValue(); } },
                { "location", n => { Location = n.GetStringValue(); } },
                { "product", n => { Product = n.GetObjectValue<global::PulsePlaylist.Api.Client.Models.ProductDto2>(global::PulsePlaylist.Api.Client.Models.ProductDto2.CreateFromDiscriminatorValue); } },
                { "productId", n => { ProductId = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created", Created);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("lastModified", LastModified);
            writer.WriteStringValue("location", Location);
            writer.WriteObjectValue<global::PulsePlaylist.Api.Client.Models.ProductDto2>("product", Product);
            writer.WriteStringValue("productId", ProductId);
            writer.WriteIntValue("quantity", Quantity);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
