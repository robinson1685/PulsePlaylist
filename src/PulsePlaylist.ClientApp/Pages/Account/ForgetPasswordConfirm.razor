@page "/account/confirm-password-reset"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json

<PageTitle>@L["Confirm password reset"]</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">@L["Set new password"]</MudText>
    </div>
    <div class="d-flex flex-column gap-2">
        @if (string.IsNullOrEmpty(message))
        {
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column gap-2">
                    <MudText>Reset your user password for @model.Email</MudText>
                    <MudTextField InputType="InputType.Password" Label="@L["New password"]" @bind-Value="model.Password" For="@(() => model.Password)" ShrinkLabel="true"></MudTextField>
                    <MudTextField InputType="InputType.Password" Label="@L["New password confirm"]" @bind-Value="model.PasswordConfirm" For="@(() => model.PasswordConfirm)" ShrinkLabel="true"></MudTextField>
                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Color="Color.Primary">@L["Set new password"]</MudButton>
                </div>
            </EditForm>
        }
        else
        {
            <MudAlert Severity="Severity.Error">@message</MudAlert>
        }
    </div>
</MudPaper>
@code {

    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }
    [SupplyParameterFromQuery(Name = "email")]
    public string? Email { get; set; }


    private ForgetPasswordConfirmModel model = new();
    private string? message;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Code) || string.IsNullOrEmpty(Email))
        {
            message = L["Invalid or missing token. Please check your verification link."];
        }
        else
        {
            model.PasswordResetToken = Code;
            model.Email = Email;
        }
    }



    private async Task OnValidSubmit(EditContext context)
    {
        var result = await ApiClientServiceProxy.ExecuteAsync(() => ApiClient.ResetPassword.PostAsync(new ResetPasswordRequest() { Email = model.Email, NewPassword = model.PasswordConfirm, ResetCode = model.PasswordResetToken }));
        result.Switch(
              ok =>
              {
                  Snackbar.Add(L["Password reset successful. You can now sign in with your new password."], Severity.Success);
                  Navigation.NavigateTo("/account/signin");
                  StateHasChanged();
              },
              invalid =>
              {
                  Snackbar.Add(L[invalid.Detail ?? "Invalid reset request. Please check the provided information and try again."], Severity.Error);
              },
              error =>
              {
                  Snackbar.Add(L["An unexpected error occurred during the password reset process. Please try again later."], Severity.Error);
              }
          );
    }

    public class ForgetPasswordConfirmModel
    {
        [Required]
        public string PasswordResetToken { get; set; } = string.Empty;
        [Required]
        public string Email { get; set; } = string.Empty;
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must be at least 6 characters long and contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;
        [Required]
        [Compare(nameof(Password))]
        public string PasswordConfirm { get; set; } = string.Empty;
    }
}
