@page "/account/confirm-email-change"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
<PageTitle>@L["Change email confirm"]</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">@L["Change email confirm"]</MudText>
    </div>
    <div class="d-flex flex-column gap-2">
        @if (string.IsNullOrEmpty(message))
        {
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column gap-2">
                    <MudText>@L["Type your password to confirm changing your email address to"] @model.NewEmail</MudText>
                    <MudTextField InputType="InputType.Password" Label="Password" @bind-Value="model.Password" For="@(() => model.Password)" ShrinkLabel="true"></MudTextField>
                    <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Color="Color.Primary" >@L["Confirm new email"]</MudButton>
                </div>
            </EditForm>
        }
        else
        {
            <MudAlert Severity="Severity.Error">@message</MudAlert>
        }
    </div>
</MudPaper>
@code {
    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }
    [SupplyParameterFromQuery(Name = "userId")]
    public string? UserId { get; set; }
    [SupplyParameterFromQuery(Name = "changedEmail")]
    public string? ChangedEmail { get; set; }
    private EmailChangeConfirmModel model = new();
    private string? message;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Code))
        {
            message = L["Invalid or missing token. Please check your verification link."];
        }
        else
        {
            try
            {
                
            }
            catch (Exception e)
            {
                message = e.Message;
                Logger.LogError(e, e.Message);
            }
        }
    }
     
    

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            // await PocketbaseClient.Auth.User.ConfirmEmailChangeAsync(model.EmailChangeResetToken, model.Password);
            // var result = await PocketbaseClient.Sdk.User.AuthenticateWithPasswordAsync(model.NewEmail, model.Password);
            // if (result?.Record?.Verified ?? false)
            // {
            //     StateHasChanged();
            // }
            // else
            // {
            //     Snackbar.Add(L["Your account is not verified. Please check your email for the verification link."], Severity.Error);
            // }
           
        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(L["Password reset request failed. Please check the email address and try again."], Severity.Error);
        }
    }

    public class EmailChangeConfirmModel
    {
        [Required]
        public string EmailChangeResetToken { get; set; } = string.Empty;
        public string NewEmail { get; set; } = string.Empty;
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must be at least 6 characters long and contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;
       
    }
}
