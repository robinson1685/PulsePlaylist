@page "/account/signin"
@inject ISignInManagement SignInManagement
@using System.ComponentModel.DataAnnotations
@using PulsePlaylist.ClientApp.Services.Identity

<PageTitle>@L["Sign In"]</PageTitle>
<MudPaper Elevation="3" Class="pa-8" Width="100%" MaxWidth="500px">
    <div class="d-flex flex-row  align-center gap-3 my-3">
        <MudBlazorLogo Style="with:60px;height:60px"></MudBlazorLogo>
        <MudText Typo="Typo.h5">@L[AppSettings.AppName]</MudText>
    </div>
    <div class="d-flex flex-column gap-2">
        @if (!RequiresTwoFactor)
        {
            <div class="d-flex flex-row gap-1">
                <MudText>@L["Don't have an account?"]</MudText> <MudLink Href="/account/signup">@L["Signup"]</MudLink>
            </div>
        }
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="d-flex flex-column gap-2">
                @if (RequiresTwoFactor)
                {
                    <MudText>Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>
                    <MudTextField @bind-Value="model.TwoFactorCode" For="@(() => model.TwoFactorCode)"
                    Label="@L["Authenticator code"]" Placeholder="@L[""]"
                    Required="true" RequiredError="@L["Authenticator code is required"]">
                    </MudTextField>
                }
                else
                {
                    <MudTextField @bind-Value="model.Username" For="@(() => model.Username)"
                    Label="@L["User name"]" Placeholder="@L["User name"]"
                    Required="true" RequiredError="@L["user name is required"]">
                    </MudTextField>
                    <PasswordInput Field="@(() => model.Password)" @bind-Value="@model.Password" Label="@L["Password"]" Placeholder="@L["Password"]" RequiredError="@L["Password is required"]" />
                    <div class="d-flex flex-row align-center justify-space-between">
                        <!-- Remember me -->
                        <MudCheckBox T="bool" @bind-Value="model.RememberMe" Color="Color.Default">
                            @L["Remember me"]
                        </MudCheckBox>
                        <MudLink Href="/account/forgetpassword">@L["Forget password?"]</MudLink>
                    </div>
                }
                <MudButton ButtonType="ButtonType.Submit" FullWidth="true" Variant="Variant.Filled" Color="Color.Primary">@L["Sign In"]</MudButton>
                @if (!RequiresTwoFactor){
                    <MudButton StartIcon="@Icons.Custom.Brands.Google" ButtonType="ButtonType.Button" FullWidth="true" Variant="Variant.Outlined" OnClick="LoginWithGoogle" Color="Color.Default">@L["Login with Google"]</MudButton>
                }
            </div>
        </EditForm>
    </div>
    <MudText Typo="Typo.overline" Style="position:absolute; bottom:8px; right:8px;">
        @(AppSettings.Version)
    </MudText>
</MudPaper>
@code {

    private SignInModel model = new SignInModel()
        {
            Username = "Administrator",
            Password = "P@ssw0rd!"
        };

  
    private bool RequiresTwoFactor = false;

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            await SignInManagement.LoginAsync(new Api.Client.Models.LoginRequest() { Email = model.Username, Password = model.Password, TwoFactorCode = model.TwoFactorCode }, model.RememberMe);
            StateHasChanged();
        }
        catch (ProblemDetails e)
        {
            if (e.Detail == "RequiresTwoFactor")
            {
                RequiresTwoFactor = true;
            }
            else if (e.Detail == "NotAllowed")
            {
                Snackbar.Add(L["Your account is not activated. Please check your email for the activation link or contact support."], Severity.Error);
            }
            else if (RequiresTwoFactor && e.Detail == "Failed")
            {
                Snackbar.Add(L["Invalid verification code."], Severity.Error);
            }
            else
            {
                Snackbar.Add(L["Authentication failed.Please check your email and password and try again."], Severity.Error);
            }
        }
        catch (ApiException e)
        {
            // Log and re-throw API exception
            if(e.ResponseStatusCode== 404)
            {
                Snackbar.Add(L["User not found. Please check the email address and try again."], Severity.Error);
            }
            else
            {
                Snackbar.Add(L["Authentication failed.Please check your email and password and try again."], Severity.Error); 
            }
        }

    }
    private async Task LoginWithGoogle()
    {
        try
        {
            var result = await ApiClient.Account.Google.LoginUrl.GetAsync(x=>x.QueryParameters.State = Navigation.BaseUri);
            if(!string.IsNullOrEmpty(result))
            {
                Navigation.NavigateTo(result);
            }

        }
        catch (Exception e)
        {
            Logger.LogError(e, e.Message);
            Snackbar.Add(L["Authentication failed.Please check your email and password and try again."], Severity.Error);
        }
    }

     


    public class SignInModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(30, ErrorMessage = "Password must be between 6 and 30 characters long.", MinimumLength = 6)]
        [RegularExpression(@"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).{6,}$", ErrorMessage = "Password must contain at least one letter, one number, and one special character.")]
        public string Password { get; set; } = string.Empty;

        [Display(Name = "Remember Me")]
        public bool RememberMe { get; set; } = true;
        [MaxLength(6)]
        public string TwoFactorCode { get; set; } = string.Empty;
    }
}
