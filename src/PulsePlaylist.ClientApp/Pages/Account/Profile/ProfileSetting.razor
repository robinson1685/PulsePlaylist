@using PulsePlaylist.ClientApp.Components.Autocompletes

@using Microsoft.Kiota.Abstractions

<EditForm Model="@model" class="d-flex flex-grow-1" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="d-flex flex-grow-1 flex-wrap gap-3">
        <div class="d-flex flex-grow-1 flex-column gap-2">
            <MudText Typo="Typo.h4">@L["Public profile"]</MudText>
            <MudTextField Label="@L["Nickname"]" @bind-Value="model.Nickname" For="@(() => model.Nickname)" ShrinkLabel="true" Adornment="Adornment.End" IconSize="Size.Small" AdornmentIcon="@Icons.Material.Filled.Edit"></MudTextField>
            <MudTextField Label="@L["User name"]" @bind-Value="model.Username" For="@(() => model.Username)" ShrinkLabel="true" Adornment="Adornment.End" IconSize="Size.Small" AdornmentIcon="@Icons.Material.Filled.Edit"></MudTextField>
            <MudTextField Label="@L["Email"]" @bind-Value="model.Email" For="@(() => model.Email)" ShrinkLabel="true" ReadOnly></MudTextField>
            <TimeZoneAutocomplete T="string" For="@(() => model.TimeZoneId)" @bind-Value="model.TimeZoneId" Label="@L["Time Zone"]"></TimeZoneAutocomplete>
            <LanguageAutocomplete T="string" For="@(() => model.LanguageCode)" @bind-Value="model.LanguageCode" Label="@L["Language"]"></LanguageAutocomplete>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Class="ml-auto">@L["Save Profile"]</MudButton>
        </div>
        <div class="d-flex flex-column  gap-1 px-4">
            @if (!string.IsNullOrEmpty(model.AvatarUrl))
            {
                <MudAvatar Style="width:150px;height:150px">
                    <MudImage Src="@model.AvatarUrl" Width="150" Height="150" ObjectFit="ObjectFit.Cover" Alt="user name" Elevation="5" Class="rounded-lg"></MudImage>
                </MudAvatar>
            }
            else
            {
                <MudAvatar Style="width:150px;height:150px">@model.Username?.FirstOrDefault()</MudAvatar>
            }
            <div class="flex-grow-0" style="margin-left:auto;margin-top:-35px;margin-right:20px">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ActivatorContent>
                        <MudIconButton Color="Color.Info"
                        Icon="@Icons.Material.Filled.PhotoCamera">
                        </MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
            </div>
        </div>


    </div>

</EditForm>

@code {
    private ProfileModel model = new();
    private ProfileResponse? userModel => UserProfileStore.Profile;

    protected override  Task OnInitializedAsync()
    {
        model = new ProfileModel
            {
                Id = userModel?.UserId ?? string.Empty,
                Email = userModel?.Email ?? string.Empty,
                Nickname = userModel?.Nickname ?? string.Empty,
                Username = userModel?.Username ?? string.Empty,
                AvatarUrl = userModel?.AvatarUrl,
                LanguageCode = userModel?.LanguageCode,
                SuperiorId = userModel?.SuperiorId,
                TenantId = userModel?.TenantId,
                TimeZoneId = userModel?.TimeZoneId
            };
        return Task.CompletedTask;
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var online = await OnlineStatusInterop.GetOnlineStatusAsync();
        if (!online)
        {
            Snackbar.Add(L["You are offline. Please check your internet connection."], Severity.Error);
            return;
        }
        try
        {
            var antiforgeryToken = await ApiClient.FileManagement.AntiforgeryToken.GetAsync();
            var request = new MultipartBody();
            request.AddOrReplacePart("overwrite", "text/plain", "false");
            request.AddOrReplacePart("folder", "text/plain", $"{model.Id}");
            request.AddOrReplacePart("cropSize_width", "text/plain", $"{150}");
            request.AddOrReplacePart("cropSize_height", "text/plain", $"{150}");
            request.AddOrReplacePart($"__{antiforgeryToken.HeaderName}", "text/plain", $"{antiforgeryToken.RequestToken}");
            var filename = file.Name;
            var stream = new MemoryStream();
            await file.OpenReadStream(int.MaxValue).CopyToAsync(stream);
            request.AddOrReplacePart($"files[0]", "application/octet-stream", stream, filename);
            var response = await ApiClient.FileManagement.Image.PostAsync(request);
            if (response is not null && response.Any())
            {
                model.AvatarUrl = response.FirstOrDefault().Url;
            }
        }
        catch
        {
            Snackbar.Add(L["Error updating user profile. Please try again."], Severity.Error);
        }


    }
    private async Task OnValidSubmit(EditContext context)
    {
        var online = await OnlineStatusInterop.GetOnlineStatusAsync();
        if (!online)
        {
            Snackbar.Add(L["You are offline. Please check your internet connection."], Severity.Error);
            return;
        }
        var result = await ApiClientServiceProxy.ExecuteAsync(() => ApiClient.Account.Profile.PostAsync(new ProfileRequest()
            {
                AvatarUrl = model.AvatarUrl,
                Email = model.Email,
                LanguageCode = model.LanguageCode,
                Nickname = model.Nickname,
                TimeZoneId = model.TimeZoneId,
                Username = model.Username,
                SuperiorId = model.SuperiorId,
                TenantId = model.TenantId,
            }));
        result.Switch(
            ok =>
            {
                UserProfileStore.Set(ok);
                Snackbar.Add(L["User profile updated successfully."], Severity.Info);
                StateHasChanged();
            },
            invalid =>
            {
                Snackbar.Add(L[invalid.Detail ?? "Failed validation"], Severity.Error);
            },
            error =>
            {
                Snackbar.Add(error.Message, Severity.Error);
            }
            );
    }

    public class ProfileModel
    {
        [Required]
        public string Id { get; set; } = string.Empty;
        [Required]
        [StringLength(50, ErrorMessage = "Password must be at least 3 characters long.", MinimumLength = 3)]
        public string Username { get; set; } = string.Empty;
        [RegularExpression(@"^[a-zA-Z0-9\s]+$", ErrorMessage = "Name contains special characters which are not allowed.")]
        public string Nickname { get; set; } = string.Empty;
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
        [MaxLength(50, ErrorMessage = "TimeZoneId cannot exceed 50 characters.")]
        public string? TimeZoneId { get; set; }
        [MaxLength(10, ErrorMessage = "LanguageCode cannot exceed 10 characters.")]
        [RegularExpression("^[a-z]{2,3}(-[A-Z]{2})?$", ErrorMessage = "Invalid language code format.")]
        public string? LanguageCode { get; set; }
        [MaxLength(50, ErrorMessage = "Nickname cannot exceed 50 characters.")]
        public string? SuperiorId { get; init; }
        [MaxLength(50, ErrorMessage = "Nickname cannot exceed 50 characters.")]
        public string? TenantId { get; set; }
    }
}
