@using PulsePlaylist.ClientApp.Services.Identity

@using Microsoft.AspNetCore.Components.Authorization
@inject ISignInManagement IdentityManagement
@inject LayoutService LayoutService
<MudMenu Class="ml-1" PositionAtCursor="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.BottomLeft">
    <ActivatorContent>
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudTooltip Text="@statusTooltip" Delay="300">
                <div class="avatar-container">
                    @if (RendererInfo.Name == "WebAssembly")
                    {
                        @if (_isOnline == false)
                        {
                            <div class="rotating-border @(LayoutService.IsDarkMode ? "dark-mode" : "light-mode")"></div>
                        }
                        else
                        {
                            <div class="online-border @(LayoutService.IsDarkMode ? "dark-mode" : "light-mode")"></div>
                        }
                    }
                    @if (string.IsNullOrEmpty(userModel?.AvatarUrl))
                    {
                        <MudAvatar Style="width:35px;height:35px">@userModel?.Username?.FirstOrDefault()</MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Style="width:35px;height:35px">
                            <MudImage Src="@userModel.AvatarUrl"></MudImage>
                        </MudAvatar>
                    }
                </div>
            </MudTooltip>
            <MudStack Justify="Justify.Center" Spacing="0">
                <MudText Typo="Typo.body2">@(userModel?.Nickname ?? userModel?.Username)</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary">@userModel?.Email</MudText>
            </MudStack>
        </MudStack>
    </ActivatorContent>
    <ChildContent>
        <MudMenuItem Href="/account/profile">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                         Icon="@Icons.Material.Filled.Person" />
                <MudText Align="Align.Center">@L["Profile"]</MudText>
            </div>
        </MudMenuItem>
        <MudMenuItem Href="/profile/setting">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                         Icon="@Icons.Material.Filled.Settings" />
                <MudText Align="Align.Center">@L["Settings"]</MudText>
            </div>
        </MudMenuItem>
        <MudMenuItem OnClick="OnSignOut">
            <div class="d-flex align-center">
                <MudIcon Class="mr-1" Size="Size.Small"
                         Icon="@Icons.Material.Filled.Logout" />
                <MudText Align="Align.Center">@L["Logout"]</MudText>
            </div>
        </MudMenuItem>

    </ChildContent>
</MudMenu>


@code {
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    private ProfileResponse? userModel => UserProfileStore.Profile;
    private string statusTooltip = "Loading...";
    private bool _isOnline = false;
    private async Task OnSignOut()
    {
        await IdentityManagement.LogoutAsync();
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        OnlineStatusInterop.Initialize();
        bool isOnline = await OnlineStatusInterop.GetOnlineStatusAsync();
        UpdateStatus(isOnline);
        OnlineStatusInterop.OnlineStatusChanged += UpdateStatus;

    }
    private void UpdateStatus(bool isOnline)
    {
        // Update the Base64 image and tooltip based on the network status
        statusTooltip = isOnline ? "Online" : "Offline";
        _isOnline = isOnline;
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from events and dispose of resources
        OnlineStatusInterop.OnlineStatusChanged -= UpdateStatus;
        await OnlineStatusInterop.DisposeAsync();
    }
}
